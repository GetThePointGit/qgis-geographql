{"version":3,"sources":["../../../node_modules/graphql-language-service-interface/dist sync /^.*$","Home.js","Console.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Home","to","fetcher","params","Promise","reject","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","console","log","status","statusText","data","JSON","parse","responseText","window","pyapi","new_data","body","stringify","send","Console","graphiqlRef","React","useRef","useState","schema","setSchema","query","setQuery","useEffect","current","getIntrospectionQuery","then","result","buildClientSchema","className","onEdit","onRunOperation","operationName","handleRunQuery","explorerIsOpen","onToggleExplorer","ref","onEditQuery","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ef929d5.chunk.js","sourcesContent":["var map = {\n\t\".\": 48,\n\t\"./\": 48,\n\t\"./GraphQLLanguageService\": 55,\n\t\"./GraphQLLanguageService.d.ts\": 214,\n\t\"./GraphQLLanguageService.d.ts.map\": 215,\n\t\"./GraphQLLanguageService.js\": 55,\n\t\"./GraphQLLanguageService.js.map\": 216,\n\t\"./autocompleteUtils\": 38,\n\t\"./autocompleteUtils.d.ts\": 217,\n\t\"./autocompleteUtils.d.ts.map\": 218,\n\t\"./autocompleteUtils.js\": 38,\n\t\"./autocompleteUtils.js.map\": 219,\n\t\"./getAutocompleteSuggestions\": 44,\n\t\"./getAutocompleteSuggestions.d.ts\": 220,\n\t\"./getAutocompleteSuggestions.d.ts.map\": 221,\n\t\"./getAutocompleteSuggestions.js\": 44,\n\t\"./getAutocompleteSuggestions.js.map\": 222,\n\t\"./getDefinition\": 40,\n\t\"./getDefinition.d.ts\": 223,\n\t\"./getDefinition.d.ts.map\": 224,\n\t\"./getDefinition.js\": 40,\n\t\"./getDefinition.js.map\": 225,\n\t\"./getDiagnostics\": 45,\n\t\"./getDiagnostics.d.ts\": 226,\n\t\"./getDiagnostics.d.ts.map\": 227,\n\t\"./getDiagnostics.js\": 45,\n\t\"./getDiagnostics.js.map\": 228,\n\t\"./getHoverInformation\": 49,\n\t\"./getHoverInformation.d.ts\": 229,\n\t\"./getHoverInformation.d.ts.map\": 230,\n\t\"./getHoverInformation.js\": 49,\n\t\"./getHoverInformation.js.map\": 231,\n\t\"./getOutline\": 54,\n\t\"./getOutline.d.ts\": 232,\n\t\"./getOutline.d.ts.map\": 233,\n\t\"./getOutline.js\": 54,\n\t\"./getOutline.js.map\": 234,\n\t\"./index\": 48,\n\t\"./index.d.ts\": 235,\n\t\"./index.d.ts.map\": 236,\n\t\"./index.js\": 48,\n\t\"./index.js.map\": 237\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 110;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Home() {\r\n  return (\r\n    <div>\r\n      <h1>Home</h1>\r\n      <Link to=\"/console\">Console</Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport GraphiQL from \"graphiql\";\r\nimport GraphiQLExplorer from \"graphiql-explorer\";\r\nimport { buildClientSchema, getIntrospectionQuery, parse } from \"graphql\";\r\n\r\nimport \"graphiql/graphiql.css\";\r\n\r\nfunction fetcher(params) {\r\n  return new Promise(function(resolve, reject) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      'POST',\r\n      \"https://gateway.geographql.com/graphql\",\r\n      true\r\n    );\r\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n\r\n// request state change event\r\n    xhr.onreadystatechange = function () {\r\n      console.log(xhr.status);\r\n      console.log(xhr.statusText);\r\n      // request completed?\r\n      //if (xhr.readyState !== 4) return;\r\n\r\n      if (xhr.status === 200) {\r\n        // request successful - show response\r\n        const data = JSON.parse(xhr.responseText);\r\n        window.pyapi.new_data(data);\r\n        resolve(data);\r\n      } else {\r\n        // request error\r\n        console.log('HTTP error', xhr.status, xhr.statusText);\r\n        reject(xhr.statusText)\r\n      }\r\n    };\r\n    var body = JSON.stringify(params);\r\n    console.log(body);\r\n\r\n    xhr.send(body);\r\n  });\r\n\r\n\r\n  // return fetch(\"http://localhost:4000/graphql\", {\r\n  //   method: \"POST\",\r\n  //   headers: {\r\n  //     Accept: \"application/json\",\r\n  //     \"Content-Type\": \"application/json\"\r\n  //   },\r\n  //   body: JSON.stringify(params)\r\n  // })\r\n  //   .then(function (response) {\r\n  //     return response.text();\r\n  //   })\r\n  //   .then(function (responseBody) {\r\n  //     try {\r\n  //       return JSON.parse(responseBody);\r\n  //     } catch (e) {\r\n  //       return responseBody;\r\n  //     }\r\n  //   });\r\n}\r\n\r\nexport default function Console() {\r\n  const graphiqlRef = React.useRef(null);\r\n  const [schema, setSchema] = React.useState(null);\r\n  const [query, setQuery] = React.useState(null);\r\n  React.useEffect(() => {\r\n    if (graphiqlRef.current) {\r\n      fetcher({\r\n        query: getIntrospectionQuery()\r\n      }).then(result => {\r\n        // const editor = graphiqlRef.current.getQueryEditor();\r\n        // editor.setOption(\"extraKeys\", {\r\n        //   ...(editor.options.extraKeys || {}),\r\n        //   \"Shift-Alt-LeftClick\": this._handleInspectOperation\r\n        // });\r\n\r\n        setSchema(buildClientSchema(result.data));\r\n      });\r\n    }\r\n  }, [graphiqlRef]);\r\n\r\n  return (\r\n    <div className=\"console\">\r\n      <GraphiQLExplorer\r\n        schema={schema}\r\n        query={query}\r\n        onEdit={query => setQuery(query)}\r\n        onRunOperation={operationName =>\r\n          graphiqlRef.current.handleRunQuery(operationName)\r\n        }\r\n        explorerIsOpen={true}\r\n        onToggleExplorer={() => {\r\n          console.log(\"toggle\");\r\n        }}\r\n      />\r\n      <GraphiQL\r\n        fetcher={fetcher}\r\n        ref={graphiqlRef}\r\n        schema={schema}\r\n        onEditQuery={query => setQuery(query)}\r\n        query={query}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport Console from \"./Console\";\r\nimport \"./App.css\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/console\">\r\n            <Console />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}